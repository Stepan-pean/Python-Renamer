#!/usr/bin/python

#Pyren, PYthon RENamer for bash; Developed with Python3 version 3.6.5; created by Stepan Tucek
######################################## Devlog ################################################
#Why Python: first I tried write script in bash but I figure out python is much better in this purpose.
#pyren isn't compiled (I trying but still fail, may because coding: UTF-8 in bash and other coding in Note xed?)
#its in \bin and \bin is added to $PATH by code in ~/.profile, cause can call pyren in bash from everywhere: 'pyren ...'; set chmod 755
######################################### Uplog ################################################
#What's new in Pyren version 1.0 (20181116): working dir is current dir without recursive; work with files; simulation mode; method: insert, remove, replace
#What's new in Pyren version 1.1 (20181117): -s switches output: "oldname --> newname" or shorty "newname"; bold text for "newname", REPLACE can execute regular expressions (https://stackoverflow.com/questions/16720541/python-string-replace-regular-expression); pyren cannot change self name
#What's new in Pyren version 1.2 (20181117): fixed duplicate names: if newnameA.C==newnameB.C then newnameB rename to newnameB_.C and print newnameB.C
#What's new in Pyren version 1.3 (20181118): add mode 'recursive'



# IMPORT

import os, re
from argparse import ArgumentParser #since Python 3.2



# FUNCTIONS

def methods( method, name, arg1, arg2 ): #every args is str !

    # INSERT from,new
    if method=='ins':
        arg1=int(arg1)
        return name[:arg1]+arg2+name[arg1:] #from>length return name+new

    # REMOVE from,to
    elif method=='rem':
        arg1=int(arg1)
        arg2=int(arg2)
        return name[:arg1]+name[arg2:] #to>length or from>to no return error

    # REPLACE old,new
    else:
        return re.sub(arg1,arg2,name) #slow version (compile expression for every file again), string.replace cannot read regular expression



def main():



    # VAR

    newnames_set = set()
    dupl_newnames_set = set()



    # INPUT, HELP

    parser = ArgumentParser()

    parser.add_argument('--version', action='version', version='1.3')
    parser.add_argument('method', choices=['ins','rem','rep'], help='insert / remove / replace')
    parser.add_argument('arg1', help='[int begin] / [int begin] / [str old]')
    parser.add_argument('arg2', help='[str new] / [int end] / [str new]')
    parser.add_argument('-n', '--nonwrite', action='store_true', help='only simulation')
    parser.add_argument('-s', '--short', action='store_true', help='print only new names')
    parser.add_argument('-r', '--recursive', action='store_true', help='work recursive')

    args = parser.parse_args()


    cwd = os.getcwd() #working dir is current dir



    # GUI

    method_dict={'ins':'INSERT at position %s pattern %s', 'rem':'REMOVE pattern at position from %s to %s', 'rep':'REPLACE pattern %s with %s'}

    print('\n' + '\033[1m Python Renamer \033[0m'.center(88,'-'))
    print('|' + ('Current directory: '+cwd).center(78,' ') + '|')
    print('|' + (method_dict[args.method] % (args.arg1, args.arg2)).center(78,' ') + '|')
    print('|' + ('Simulation: ' + str(args.nonwrite) + '  |  Recursive: ' + str(args.recursive)).center(78,' ') + '|')
    print('-'*80 + '\n')



    # FOR ALL FILES/DIRS

    for subdir, dirs, files in os.walk(cwd, topdown=True):
        if args.recursive == False:
            del dirs[:]  #remove the subdirectories

        for file in files:

            # FOR FILE
            if file!='pyren': #don't change self
                newname=methods(args.method,file,args.arg1,args.arg2)
                if args.short:
                    string_old=''
                else:
                    string_old=("'"+file+"'").ljust(30) + ' --> \t'

                if newname in newnames_set: #duplicate name
                    dupl_newnames_set.add(newname)
                    newname=newname.split('.')
                    newname[0]=newname[0]+'_'
                    newname='.'.join(newname)
                else:
                    newnames_set.add(newname)

                print (string_old + "'" + '\033[1m' + newname + '\033[0m' + "'") #bold new name

                if args.nonwrite == False: #!args.nonwrite: doesn't work
                    os.rename(file,newname)

    if len(dupl_newnames_set):
        print('\n' + '-'*80)
        print('|' + ('Solved duplicates: ' + '\033[1m' + str(dupl_newnames_set)[5:-2] + '\033[0m').center(86,' ') + '|')
    print('\n')



# PROCESS

if __name__ == '__main__':
    main()
